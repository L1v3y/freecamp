#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/msg.h>

#define MAX_SIZE 256

typedef struct {
    long msg_type;
    char msg_text[MAX_SIZE];
} message;

int main(int argc, char *argv[]) {
    int msgid, i;
    key_t key;
    message msg;

    if (argc < 2) {
        fprintf(stderr, "Usage: %s message\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    // Generate a unique key for the message queue
    if ((key = ftok(".", 'A')) == -1) {
        perror("ftok");
        exit(EXIT_FAILURE);
    }

    // Create or connect to the message queue
    if ((msgid = msgget(key, IPC_CREAT | 0666)) == -1) {
        perror("msgget");
        exit(EXIT_FAILURE);
    }

    // Send messages with unique message numbers
    for (i = 1; i < argc; i++) {
        // Set the message type to the message number
        msg.msg_type = i;
        // Copy the message text from the command line argument
        strncpy(msg.msg_text, argv[i], MAX_SIZE);
        // Send the message to the queue
        if (msgsnd(msgid, &msg, strlen(msg.msg_text) + 1, 0) == -1) {
            perror("msgsnd");
            exit(EXIT_FAILURE);
        }
        printf("Sent message %d: %s\n", i, msg.msg_text);
    }

    return 0;
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/msg.h>

#define MAX_SIZE 256

typedef struct {
    long msg_type;
    char msg_text[MAX_SIZE];
} message;

int main(int argc, char *argv[]) {
    int msgid, msg_num;
    key_t key;
    message msg;

    if (argc < 2) {
        fprintf(stderr, "Usage: %s message_number\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    // Parse the message number from the command line argument
    msg_num = atoi(argv[1]);

    // Generate the same key that was used to create the message queue
    if ((key = ftok(".", 'A')) == -1) {
        perror("ftok");
        exit(EXIT_FAILURE);
    }

    // Connect to the message queue
    if ((msgid = msgget(key, 0)) == -1) {
        perror("msgget");
        exit(EXIT_FAILURE);
    }

    // Receive the message with the specified message number
    if (msgrcv(msgid, &msg, MAX_SIZE, msg_num, 0) == -1) {
        perror("msgrcv");
        exit(EXIT_FAILURE);
    }

    printf("Received message %d: %s\n", msg_num, msg.msg_text);

    return

